AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation template for setting up an Autoscaling Group of EC2 instances.

Parameters:

  NetworkStackName:
    Type: String
    Description: The name of the network stack
  LoadBalancerStackName:
    Type: String
    Description: The name of the load balancer stack
  InstanceType:
    Type: String
    Description: The instance type to use for the EC2 instance
    Default: t2.micro
  Hostname:
    Type: String
    Description: The hostname for which requests are handled
  CertificateArn:
    Type: String
    Description: The ARN of the SSL certificate
  ListenerRulePriority:
    Type: Number
    Description: The priority of the listener rule
    Default: 10
  MinSize:
    Type: Number
    Description: The minimal size of the auto scaling group
    Default: 1
  MaxSize:
    Type: Number
    Description: The maximum size of the auto scaling group
    Default: 1
  DesiredCapacity:
    Type: Number
    Description: The desired number of nodes in the auto scaling group
    Default: 1
  KeyName:
    Type: String
    Description: The name of the SSH key pair

Resources:

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType:
          Ref: InstanceType
        ImageId: ami-034fffcc6a0063961
        SecurityGroupIds:
          - Fn::GetAtt: WebSecurityGroup.GroupId
          - Fn::ImportValue:
              Fn::Sub: ${NetworkStackName}-SSHSecurityGroup
        KeyName:
          Ref: KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Web Server
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: Web Server
        UserData:
          Fn::Base64:
            Fn::Join:
              - ''
              - - "#!/bin/bash\n"
                - "yum -y --security update\n"
                # Install Docker
                - "amazon-linux-extras install -y docker\n"
                - "systemctl enable docker.service\n"
                - "systemctl start docker.service\n"
                - "usermod -a -G docker ec2-user\n"
                # Run nginx as a Docker container
                - "docker run --rm -d -p 80:80 nginx\n"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplate
        Version:
          Fn::GetAtt: LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: ${NetworkStackName}-PrivateSubnet1
        - Fn::ImportValue:
            Fn::Sub: ${NetworkStackName}-PrivateSubnet2
        - Fn::ImportValue:
            Fn::Sub: ${NetworkStackName}-PrivateSubnet3
      TargetGroupARNs:
        - Ref: TargetGroup
      MinSize:
        Ref: MinSize
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-VpcId

  # Only listen to requests for certain domains
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: host-header
          Values:
            - Ref: Hostname
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      ListenerArn:
        Fn::ImportValue:
          Fn::Sub: ${LoadBalancerStackName}-Listener
      Priority:
        Ref: ListenerRulePriority

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        - CertificateArn:
            Ref: CertificateArn
      ListenerArn:
        Fn::ImportValue:
          Fn::Sub: ${LoadBalancerStackName}-Listener

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows traffic via HTTP from load balancer
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Fn::ImportValue:
              Fn::Sub: ${LoadBalancerStackName}-SecurityGroup
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${NetworkStackName}-VpcId

Outputs:

  AutoScalingGroup:
    Description: The ARN of the AutoScaling Group
    Value:
      Ref: AutoScalingGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AutoScalingGroup
