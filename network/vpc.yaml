AWSTemplateFormatVersion: '2010-09-09'
Description: A template for creating a VPC across three AZs with a public and private subnet in each AZ. Routing of traffic from the private subnets to the public internet is performed through a NAT Gateway.

Parameters:
  VPCName:
    Type: String
    Description: The name of the VPC
  VPCCidrBlock:
    Type: String
    Description: The CIDR block of the VPC
    Default: 10.0.0.0/16
  PublicSubnet1CidrBlock:
    Type: String
    Description: The CIDR block of the first public subnet inside the VPC.
    Default: 10.0.0.0/24
  PublicSubnet2CidrBlock:
    Type: String
    Description: The CIDR block of the second public subnet inside the VPC.
    Default: 10.0.1.0/24
  PublicSubnet3CidrBlock:
    Type: String
    Description: The CIDR block of the third public subnet inside the VPC.
    Default: 10.0.2.0/24
  PrivateSubnet1CidrBlock:
    Type: String
    Description: The CIDR block of the first private subnet inside the VPC.
    Default: 10.0.10.0/24
  PrivateSubnet2CidrBlock:
    Type: String
    Description: The CIDR block of the second private subnet inside the VPC.
    Default: 10.0.11.0/24
  PrivateSubnet3CidrBlock:
    Type: String
    Description: The CIDR block of the third private subnet inside the VPC.
    Default: 10.0.12.0/24
  NATSetup:
    Type: String
    Description: The strategy for setting up the NAT Gateways
    Default: single
    AllowedValues:
      - none
      - single
  SourceCidrIp:
    Type: String
    Description: The IP CIDR block from which SSH access is allowed
    Default: 0.0.0.0/0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VPCName
          - VPCCidrBlock
      - Label:
          default: Public Subnets
        Parameters:
          - PublicSubnet1CidrBlock
          - PublicSubnet2CidrBlock
          - PublicSubnet3CidrBlock
      - Label:
          default: Private Subnets
        Parameters:
          - PrivateSubnet1CidrBlock
          - PrivateSubnet2CidrBlock
          - PrivateSubnet3CidrBlock

Conditions:
  SingleNATGateway:
    Fn::Equals:
      - Ref: NATSetup
      - single

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:
            Ref: VPCName

  #
  # Subnets
  #

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet2CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet3CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet2CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet3CidrBlock
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      Tags:
        - Key: Name
          Value: Private Subnet 3

  #
  # Internet Gateway
  #

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  #
  # Routing
  #

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  #
  # NAT Gateway
  #

  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: SingleNATGateway
    Properties:
      AllocationId:
        Fn::GetAtt: EIP.AllocationId
      SubnetId:
        Ref: PublicSubnet1
    DependsOn: VPCGatewayAttachment

  EIP:
    Type: AWS::EC2::EIP
    Condition: SingleNATGateway
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Condition: SingleNATGateway
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  #
  # Security Groups
  #

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH connections from the Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SourceCidrIp
      VpcId:
        Ref: VPC

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH connections from the bastion host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            Ref: BastionHostSecurityGroup
      VpcId:
        Ref: VPC

  #
  # Network ACLs
  #
  # Based on recommendations by AWS (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-recommended-nacl-rules.html#nacl-rules-scenario-2)
  #

  PublicSubnetNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Public Subnet ACLs

  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicSubnetNetworkACL

  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicSubnetNetworkACL

  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: PublicSubnetNetworkACL

  # Allow HTTP connections from the public internet
  PublicSubnetHTTPInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow HTTPS connections from the public internet
  PublicSubnetHTTPSInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow HTTP connections from the configured source CIDR block
  PublicSubnetSSHInboundFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: SourceCidrIp
      PortRange:
        From: 22
        To: 22

  # Allow responses to connections established from within the public subnets
  # Commonly these are responses for HTTP/HTTPS connections for software updates)
  PublicSubnetInboundReturnFromInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Allow HTTP connections to the public internet
  PublicSubnetHTTPOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow HTTPS connections to the public internet
  PublicSubnetHTTPSOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow HTTP connections to the private subnet 1
  # This is necessary to forward traffic from a load balancer to web servers in the private subnets
  PublicSubnetHTTPOutboundToPrivateSubnet1AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet1CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow HTTP connections to the private subnet 2
  # This is necessary to forward traffic from a load balancer to web servers in the private subnets
  PublicSubnetHTTPOutboundToPrivateSubnet2AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet2CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow HTTP connections to the private subnet 3
  # This is necessary to forward traffic from a load balancer to web servers in the private subnets
  PublicSubnetHTTPOutboundToPrivateSubnet3AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet3CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow SSH connections to the private subnet 1
  PublicSubnetSSHOutboundToPrivateSubnet1AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet1CidrBlock
      PortRange:
        From: 22
        To: 22

  # Allow SSH connections to the private subnet 2
  PublicSubnetSSHOutboundToPrivateSubnet2AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 160
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet2CidrBlock
      PortRange:
        From: 22
        To: 22

  # Allow SSH connections to the private subnet 3
  PublicSubnetSSHOutboundToPrivateSubnet3AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 170
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PrivateSubnet3CidrBlock
      PortRange:
        From: 22
        To: 22

  # Allow responses to connections established from the outside of the public subnets
  # Commonly these are responses to HTTP/HTTPS and SSH connections
  PublicSubnetOutboundReturnToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicSubnetNetworkACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768
        To: 65535

  PrivateSubnetNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet ACLs

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL

  PrivateSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL

  # Allow HTTP connection from the public subnet 1
  PrivateSubnetHTTPInboundFromPublicSubnet1AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet1CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow HTTP connection from the public subnet 2
  PrivateSubnetHTTPInboundFromPublicSubnet2AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet2CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow HTTP connection from the public subnet 3
  PrivateSubnetHTTPInboundFromPublicSubnet3AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet3CidrBlock
      PortRange:
        From: 80
        To: 80

  # Allow SSH connection from the public subnet 1
  PrivateSubnetSSHInboundFromPublicSubnet1AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet1CidrBlock
      PortRange:
        From: 22
        To: 22

  # Allow SSH connection from the public subnet 2
  PrivateSubnetSSHInboundFromPublicSubnet2AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet2CidrBlock
      PortRange:
        From: 22
        To: 22

  # Allow SSH connection from the public subnet 3
  PrivateSubnetSSHInboundFromPublicSubnet3AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock:
        Ref: PublicSubnet3CidrBlock
      PortRange:
        From: 22
        To: 22

  PrivateSubnetInboundReturnAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 160
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # Allow HTTP connections to the public internet
  PrivateSubnetHTTPOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  # Allow HTTPS connections to the public internet
  PrivateSubnetHTTPSOutboundToInternetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # Allow return traffic to public subnet 1
  PrivateSubnetOutboundReturnToPublicSubnet1AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PublicSubnet1CidrBlock
      PortRange:
        From: 32768
        To: 65535

  # Allow return traffic to public subnet 2
  PrivateSubnetOutboundReturnToPublicSubnet2AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PublicSubnet2CidrBlock
      PortRange:
        From: 32768
        To: 65535

  # Allow return traffic to public subnet 3
  PrivateSubnetOutboundReturnToPublicSubnet3AclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PrivateSubnetNetworkACL
      RuleNumber: 140
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock:
        Ref: PublicSubnet3CidrBlock
      PortRange:
        From: 32768
        To: 65535

Outputs:

  VpcId:
    Description: VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VpcId

  PublicSubnet1:
    Description: The ID of the first public subnet
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: The ID of the second public subnet
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet2

  PublicSubnet3:
    Description: The ID of the third public subnet
    Value:
      Ref: PublicSubnet3
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet3

  PrivateSubnet1:
    Description: The ID of the first private subnet
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: The ID of the second private subnet
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: The ID of the third private subnet
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet3

  PublicSubnetRouteTable:
    Description: The ID of route table for the public subnets
    Value:
      Ref: PublicSubnetRouteTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnetRouteTable

  PrivateSubnetRouteTable:
    Description: The ID of route table for the private subnets
    Value:
      Ref: PrivateSubnetRouteTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnetRouteTable

  BastionHostSecurityGroup:
    Description: The Security Group for accessing the bastion host via SSH
    Value:
      Ref: BastionHostSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-BastionHostSecurityGroup

  SSHSecurityGroup:
    Description: The Security Group for providing access from bastion host to instances via SSH
    Value:
      Ref: SSHSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SSHSecurityGroup
